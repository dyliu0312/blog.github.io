<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Fix-git-push-fail_v2.md</title>
    <link href="/blog.github.io/2025/10/20/Fix-git-push-fail-v2/"/>
    <url>/blog.github.io/2025/10/20/Fix-git-push-fail-v2/</url>
    
    <content type="html"><![CDATA[<h1 id="Fix-git-pull-fail-v2"><a href="#Fix-git-pull-fail-v2" class="headerlink" title="Fix git pull fail v2"></a>Fix git pull fail v2</h1><p>Several months ago, I wrote a blog about how to <a href="https://dyliu0312.github.io/blog.github.io/2025/02/09/Fix-git-pull-fail/">Fix-git-push-fail</a> . </p><p>But now, I acidentally found that I didn’t spelled my email address correctly in the <code>git config</code> (Because I found that I can’t access a newly create private repo on GitHub, and the commit user seems differs from the one I farmiliar with).<br>Which caused conflict between my local ssh key and the one in the GitHub account.</p><p>So, a easier way to fix this problem is to change <code>git config</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.email <span class="hljs-string">&quot;your_email@example.com&quot;</span><br>git config --global user.name <span class="hljs-string">&quot;your_name&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Fix problem</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GitHub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Migrate blog homepage</title>
    <link href="/blog.github.io/2025/09/07/Migrate-blog-homepage/"/>
    <url>/blog.github.io/2025/09/07/Migrate-blog-homepage/</url>
    
    <content type="html"><![CDATA[<h1 id="Migrate-blog-homepage"><a href="#Migrate-blog-homepage" class="headerlink" title="Migrate blog homepage"></a>Migrate blog homepage</h1><p>I want to migrate my blog homepage from <code>dyliu0312.github.io</code> to sub page (or folder), e.g. <code>dyliu0312.github.io/blog/</code>, so that I can use that domain name for my personal website (and also blog).</p><h2 id="1-Rename-the-github-repository"><a href="#1-Rename-the-github-repository" class="headerlink" title="1. Rename the github repository"></a>1. Rename the github repository</h2><ul><li><p>Navigate to blog repository on GitHub</p></li><li><p>Go to the “Settings” tab.</p></li><li><p>Under the “General” section, find the “Repository name” field and click “Rename”.</p></li><li><p>Enter the new name, e.g. blog.github.io, and click “Rename”.</p></li></ul><h2 id="2-Change-the-repository-URL-in-the-config-yml-file"><a href="#2-Change-the-repository-URL-in-the-config-yml-file" class="headerlink" title="2. Change the repository URL in the _config.yml file"></a>2. Change the repository URL in the _config.yml file</h2><ul><li><p>Open the <code>_config.yml</code> file in the root directory of your Hexo blog.</p></li><li><p>Locate the <code>url</code> field and change it to the new URL, e.g. <code>https://dyliu0312.github.io/blog.github.io/</code>.</p></li><li><p>Locate the deployment section and change the <code>repo</code> field to the new repository URL, e.g. <code>https://github.com/dyliu0312/blog.github.io.git</code>.</p></li><li><p>Save the changes and commit.</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean<br>hexo g<br>hexo d<br></code></pre></td></tr></table></figure></li></ul><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li>Google Gemini</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>GitHub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fix git push failure</title>
    <link href="/blog.github.io/2025/02/09/Fix-git-push-fail/"/>
    <url>/blog.github.io/2025/02/09/Fix-git-push-fail/</url>
    
    <content type="html"><![CDATA[<h1 id="Fix-git-push-failure"><a href="#Fix-git-push-failure" class="headerlink" title="Fix git push failure"></a>Fix git push failure</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>One day, I suddenly found that I can not access to my repo directly using <code>git push</code> command.</p><p>I tried check connection using</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -vT git@github.com<br></code></pre></td></tr></table></figure><p>everything went well.</p><p>So I think the <strong>ssh key may have been specified incorrectly</strong>, while directly using <code>git push</code> (I also got other ssh keys for other github repositories, which may conflict).</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ol><li><p>generate a new ssh key pair</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t ed25519 -C <span class="hljs-string">&quot;your_email@example.com&quot;</span><br></code></pre></td></tr></table></figure><p>and rename it (e.g. <code>id_ed25519_github</code>) to distinguish it from other keys.</p></li><li><p>change the ssh config</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vi .ssh/config<br></code></pre></td></tr></table></figure><p>to point the right key</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">Host github-repo<br>HostName github.com<br>IdentityFile=/home/dyliu/.ssh/id_ed25519_github<br></code></pre></td></tr></table></figure></li><li><p>use alternative way to pull or push repo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push git@github-repo:yourname/your-repo.git<br></code></pre></td></tr></table></figure></li></ol><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://docs.github.com/en/enterprise-cloud@latest/authentication/connecting-to-github-with-ssh/managing-deploy-keys">https://docs.github.com/en/enterprise-cloud@latest/authentication/connecting-to-github-with-ssh/managing-deploy-keys</a><br><a href="https://docs.github.com/en/enterprise-cloud@latest/authentication/connecting-to-github-with-ssh/using-ssh-agent-forwarding">https://docs.github.com/en/enterprise-cloud@latest/authentication/connecting-to-github-with-ssh/using-ssh-agent-forwarding</a></p>]]></content>
    
    
    <categories>
      
      <category>Fix problem</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GitHub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fix &#39;Unable-to-acess-location&#39; error when mount disk</title>
    <link href="/blog.github.io/2024/12/14/Fix-Unable-to-acess-location-error-when-mount-disk/"/>
    <url>/blog.github.io/2024/12/14/Fix-Unable-to-acess-location-error-when-mount-disk/</url>
    
    <content type="html"><![CDATA[<h1 id="Fix-“Unable-to-acess-location”-error-when-mount-disk"><a href="#Fix-“Unable-to-acess-location”-error-when-mount-disk" class="headerlink" title="Fix “Unable to acess location” error when mount disk"></a>Fix “Unable to acess location” error when mount disk</h1><ul><li>Enviroment: Ubuntu 24.4 and Windows 11 (Dual system)</li></ul><p>In ubuntu 24.4, there is a desktop shortcut on the hover to quickly <code>mount</code> disk and open <code>nautilus</code> with a simple click. </p><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>However, I found a error issued recently:<br><img src="/blog.github.io/img/access_error.png" alt="Access Error"><br>when I tried to use the hover shortcut to mount my Data partition, which was originally belong to Windows system with NTFS type.</p><h2 id="Cause"><a href="#Cause" class="headerlink" title="Cause"></a>Cause</h2><ol><li><p>Windows Fast Boot:<br>It’s probally due the “Fast Boot” of Windows still occupying the disk.</p></li><li><p>Drive errors:<br>There are some drive errors need to be fixed.</p></li></ol><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Turn-off-Fast-Boot"><a href="#Turn-off-Fast-Boot" class="headerlink" title="Turn off Fast Boot"></a>Turn off Fast Boot</h3><ol><li>Open “Control Panel“.</li><li>Click “Power Options.”</li><li>Click the “Choose what the power buttons do” link.</li><li>Press the “Change settings that are currently unavailable” link.</li><li>Uncheck the “Turn on fast startup” checkbox.</li><li>Click the “Save changes” button.</li></ol><h3 id="Fix-drive"><a href="#Fix-drive" class="headerlink" title="Fix drive"></a>Fix drive</h3><p>I tried but failed to use <code>ntfsfix</code> to fix it in Ubuntu, because the Data partition is belong to Windows system.</p><p>So we have to fix it in Windows system.</p><ol><li>Boot to Windows system</li><li>Open <code>cmd</code> (or <code>powershell</code>)</li><li>Run:<figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">chkdsk</span> /f d:<br></code></pre></td></tr></table></figure></li><li>Reboot Windows</li></ol><p>After that, reboot Ubuntu and free to go.</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><a href="https://askubuntu.com/a/1492976">https://askubuntu.com/a/1492976</a></li><li><a href="https://unix.stackexchange.com/a/781599">https://unix.stackexchange.com/a/781599</a></li><li><a href="https://linux.cn/article-2045-1.html">https://linux.cn/article-2045-1.html</a></li><li><a href="https://windowsloop.com/how-to-turn-off-fast-startup-in-windows-10/">https://windowsloop.com/how-to-turn-off-fast-startup-in-windows-10/</a></li><li><a href="https://www.howtogeek.com/1033/how-to-use-chkdsk-on-windows/">https://www.howtogeek.com/1033/how-to-use-chkdsk-on-windows/</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Fix problem</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ubuntu</tag>
      
      <tag>Windows</tag>
      
      <tag>Disk</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fix screen flickering on Ubuntu</title>
    <link href="/blog.github.io/2024/12/02/Fix-screen-flickering-on-Ubuntu/"/>
    <url>/blog.github.io/2024/12/02/Fix-screen-flickering-on-Ubuntu/</url>
    
    <content type="html"><![CDATA[<h1 id="Fix-screen-flickering-on-Ubuntu"><a href="#Fix-screen-flickering-on-Ubuntu" class="headerlink" title="Fix screen flickering on Ubuntu"></a>Fix screen flickering on Ubuntu</h1><ul><li>Processor: AMD Ryzen™ 7 7840HS w&#x2F; Radeon™ 780M Graphics × 16</li></ul><h2 id="Modify-the-grub"><a href="#Modify-the-grub" class="headerlink" title="Modify the grub"></a>Modify the grub</h2><p>Run </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> vi /etc/default/grub<br></code></pre></td></tr></table></figure><p>and add <code>amdgpu.sg_display=0</code> in line <code>GRUB_CMDLINE_LINUX_DEFAULT</code></p><p>For example:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet splash amdgpu.sg_display=0&quot;<br></code></pre></td></tr></table></figure><p>Then </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> update-grub<br>reboot<br></code></pre></td></tr></table></figure><h2 id="Turn-language-into-English-do-not-using-Chinese"><a href="#Turn-language-into-English-do-not-using-Chinese" class="headerlink" title="Turn language into English, do not using Chinese."></a>Turn language into English, do not using Chinese.</h2><p>After fixed the flicking problem through aforementioned method, I found it flickering again when swith the language into Chinese. </p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://community.frame.work/t/tracking-screen-flashing-partially-white-on-framework-13-amd-ubuntu-22-04/40626?page=2">https://community.frame.work/t/tracking-screen-flashing-partially-white-on-framework-13-amd-ubuntu-22-04/40626?page=2</a><br><a href="https://bugs.launchpad.net/ubuntu/+source/linux/+bug/2064906/">https://bugs.launchpad.net/ubuntu/+source/linux/+bug/2064906/</a></p>]]></content>
    
    
    <categories>
      
      <category>Fix problem</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ubuntu</tag>
      
      <tag>AMD</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Install Ubuntu on Windows laptop (dual system)</title>
    <link href="/blog.github.io/2024/12/01/Install-Ubuntu-on-Windows-laptop-dual-system/"/>
    <url>/blog.github.io/2024/12/01/Install-Ubuntu-on-Windows-laptop-dual-system/</url>
    
    <content type="html"><![CDATA[<h1 id="Install-Ubuntu-on-Windows-laptop-dual-system"><a href="#Install-Ubuntu-on-Windows-laptop-dual-system" class="headerlink" title="Install Ubuntu on Windows laptop (dual system)"></a>Install Ubuntu on Windows laptop (dual system)</h1><ul><li>Laptop: Mechrevo wujie14 pro</li></ul><h2 id="Check-bios-mode"><a href="#Check-bios-mode" class="headerlink" title="Check bios mode"></a>Check bios mode</h2><p>In windows, press <code>Win+R</code> and find <code>msinfo32</code> to check bios mode. </p><p>If it’s not UEFI (for example, Legacy), you need to swith to bios mode, and change the <code>Boot</code>.</p><p>It’s UEFI in my laptop, no need to worry.</p><h2 id="Check-GUID-Partition-Table"><a href="#Check-GUID-Partition-Table" class="headerlink" title="Check GUID Partition Table"></a>Check GUID Partition Table</h2><p>In <code>Disk Management</code>, check the property of disk. If it’s not <code>GUID Partition Table (GPT)</code>, you need to open <code>cmd</code> and input</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmd">diskpart<br><br>list disk<br></code></pre></td></tr></table></figure><p>then select disk and convert:</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cmd">select disk=<span class="hljs-number">0</span><br><br><span class="hljs-built_in">convert</span> gpt<br><br>list disk<br></code></pre></td></tr></table></figure><p>It’s UEFI in my laptop, no need to worry.</p><h2 id="Trun-off-Bitlocker"><a href="#Trun-off-Bitlocker" class="headerlink" title="Trun off Bitlocker"></a>Trun off Bitlocker</h2><p>Press <code>Win+I</code> to open settings, and turn off the bitlocker</p><h2 id="Prepare-Ubuntu-boot-drive"><a href="#Prepare-Ubuntu-boot-drive" class="headerlink" title="Prepare Ubuntu boot drive"></a>Prepare Ubuntu boot drive</h2><ol><li><p>Download <a href="https://ubuntu.com/download/desktop#how-to-install-NobleNumbat">Ubuntu</a> iso, for example, I choose Ubuntu 24.04.1 LTS.</p></li><li><p>Create a bootable USB flash drive with <a href="https://etcher.balena.io/">balenaEtcher</a>.</p><p> I tried similar software, Rufus, but can not find the ubuntu boot option in bios, probably due the missing UEFI file.</p></li></ol><h2 id="Spare-memory-space-for-Ubuntu"><a href="#Spare-memory-space-for-Ubuntu" class="headerlink" title="Spare memory space for Ubuntu"></a>Spare memory space for Ubuntu</h2><ol><li><p>Install <a href="https://www.diskgenius.com/free.php">DiskGenius</a></p></li><li><p>Open DiskGenius, and select a volume, for example <code>D</code>, and choose <code>compress volume</code>, adjust the volume size to get freee space. Here I spare 300 GB spaces for Ubuntu.</p></li></ol><h2 id="Modify-UEFI-and-MSR-partition"><a href="#Modify-UEFI-and-MSR-partition" class="headerlink" title="Modify UEFI and MSR partition"></a>Modify UEFI and MSR partition</h2><p><strong>This doesn’t seem to be a necessary step, because after I finished the installation, the new UEFI took up only 64 MB, less than the original 100 MB</strong></p><p>But just for in case, I enlarged the UEFI volume to 400 MB.</p><p>It comes with following steps:</p><ol><li><p>remember the start and end indices of each partitions</p></li><li><p>backup the UEFI files</p></li><li><p>modify the volume of Windows parition to spare additional 300 MB spaces in font of the windows partition</p></li><li><p>delete and recreate the UEFI and MSR partitions</p></li><li><p>modify the start and end indices of UEFI and MSR partitions</p><p> For UEFI, the start is same as it was before, and the end is extended to include additional 300 MB spaces.</p><p> And the MSR is using the spaces between UEFI and Windos partition, mantianed to be 16 MB in my case.</p></li></ol><p><strong>If you mistakenly delete the UEFI and MSR files without backup, you need to reboot from a PE system with DiskGenius, regenerate the UEFI and MSR partition, and use the <code>Windows UEFI recovery</code> tools to recover it.</strong></p><h2 id="Install-Ubuntu"><a href="#Install-Ubuntu" class="headerlink" title="Install Ubuntu"></a>Install Ubuntu</h2><ol><li><p>swith to Bios mode</p><ul><li><p>Directly use the <code>Adanced Startup</code> in the Windows Settings</p></li><li><p>Or restart the mechine and press hotkey (<code>ESC</code> in my case)</p></li></ul></li><li><p>choose <code>boot from usb drive</code>, to boot and install Ubuntu.</p></li></ol><h2 id="Install-grub2-themes-Optional"><a href="#Install-grub2-themes-Optional" class="headerlink" title="Install grub2 themes (Optional)"></a>Install grub2 themes (Optional)</h2><p>We can install grub themes to change the start up menu:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">git <span class="hljs-built_in">clone</span> https://github.com/vinceliuice/grub2-themes.git<br></code></pre></td></tr></table></figure><p>For exampel, I use the <code>Whitesur</code>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> ./install.sh -t whitesur -c 2880x1800 -b<br></code></pre></td></tr></table></figure><p>To uninstall:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> ./install.sh -r -t whitesur<br></code></pre></td></tr></table></figure><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://blog.csdn.net/2401_84064328/article/details/137232169">https://blog.csdn.net/2401_84064328/article/details/137232169</a><br><a href="https://www.cnblogs.com/ay2021/p/15151630.html">https://www.cnblogs.com/ay2021/p/15151630.html</a></p>]]></content>
    
    
    <categories>
      
      <category>Install</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ubuntu</tag>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Install v2rayA</title>
    <link href="/blog.github.io/2024/12/01/Install-v2rayA/"/>
    <url>/blog.github.io/2024/12/01/Install-v2rayA/</url>
    
    <content type="html"><![CDATA[<h1 id="Install-v2rayA"><a href="#Install-v2rayA" class="headerlink" title="Install v2rayA"></a>Install <a href="https://github.com/v2rayA/v2rayA?tab=readme-ov-file">v2rayA</a></h1><h2 id="Downlaod-image"><a href="#Downlaod-image" class="headerlink" title="Downlaod image"></a>Downlaod image</h2><ul><li><p>The easiest way to download iamge is though:</p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker pull mzz2017/v2raya<br></code></pre></td></tr></table></figure></li><li><p>However, if you can not get access to Docker Hub, you have two solution:</p></li></ul><ol><li><p>find an <a href="https://github.com/dongyubin/DockerHub?tab=readme-ov-file">available mirror</a>, for example, use:</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> docker pull dockerpull.org/mzz2017/v2raya<br></code></pre></td></tr></table></figure></li><li><p>manually download the image, and load it:</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker load -i v2raya.tar<br></code></pre></td></tr></table></figure></li></ol><h2 id="Run-image"><a href="#Run-image" class="headerlink" title="Run image"></a>Run image</h2><p>Using a iptables legacy backend and xray kernel:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> docker run -d <br>--restart=always \<br>--privileged \<br>--network=host \<br>--name v2raya \<br>-e V2RAYA_LOG_FILE=/tmp/v2raya.<span class="hljs-built_in">log</span> \<br>-e V2RAYA_NFTABLES_SUPPORT=off \<br>-e IPTABLES_MODE=legacy \<br>-v /lib/modules:/lib/modules:ro \<br>-v /etc/resolv.conf:/etc/resolv.conf \<br>-v /etc/v2raya:/etc/v2raya \<br>mzz2017/v2raya<br></code></pre></td></tr></table></figure><p>You then can open <a href="localhost:2017">localhost:2017</a> to use v2rayA in web-gui.</p><h2 id="Check-Status"><a href="#Check-Status" class="headerlink" title="Check Status"></a>Check Status</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> docker container stats v2raya<br></code></pre></td></tr></table></figure><h2 id="Reomve"><a href="#Reomve" class="headerlink" title="Reomve"></a>Reomve</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> docker container stop v2raya<br><span class="hljs-built_in">sudo</span> docker container <span class="hljs-built_in">rm</span> v2raya<br></code></pre></td></tr></table></figure><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://v2raya.org/en/docs/prologue/installation/docker/">https://v2raya.org/en/docs/prologue/installation/docker/</a></p>]]></content>
    
    
    <categories>
      
      <category>Install</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ubuntu</tag>
      
      <tag>Docker</tag>
      
      <tag>Network</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Install Docker on Ubuntu</title>
    <link href="/blog.github.io/2024/12/01/Install-Docker-on-Ubuntu/"/>
    <url>/blog.github.io/2024/12/01/Install-Docker-on-Ubuntu/</url>
    
    <content type="html"><![CDATA[<h1 id="Install-Docker-on-Ubuntu"><a href="#Install-Docker-on-Ubuntu" class="headerlink" title="Install Docker on Ubuntu"></a>Install Docker on Ubuntu</h1><ul><li>Enviroment: Ubuntu&#x3D;24.4</li></ul><h2 id="Firewall-limitations"><a href="#Firewall-limitations" class="headerlink" title="Firewall limitations"></a>Firewall limitations</h2><ol><li><p>If using <code>ufw</code> or <code>firewalld</code> to manage firewall settings,</p><p> When you expose container ports using Docker, these ports <strong>bypass</strong> your firewall rules.</p></li><li><p>Docker is <strong>only</strong> compatible with <code>iptables-nft</code> and <code>iptables-legacy</code>.</p><p> Firewall rules created with <code>nft</code> are not supported on a system with Docker installed.<br> Make sure that any firewall rulesets you use are created with <code>iptables</code> or <code>ip6tables</code>, and that you add them to the DOCKER-USER chain.</p></li></ol><h2 id="Uninstall-Docker（old-versions）"><a href="#Uninstall-Docker（old-versions）" class="headerlink" title="Uninstall Docker（old versions）"></a>Uninstall Docker（old versions）</h2><ol><li><p>Uninstall the Docker Engine, CLI, containerd, and Docker Compose packages:</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> apt-get purge docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin docker-ce-rootless-extras<br></code></pre></td></tr></table></figure></li><li><p>Remove all images, containers, and volumes:</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">rm</span> -rf /var/lib/docker<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">rm</span> -rf /var/lib/containerd<br></code></pre></td></tr></table></figure></li><li><p>Remove source list and keyrings</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">rm</span> /etc/apt/sources.list.d/docker.list<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">rm</span> /etc/apt/keyrings/docker.asc<br></code></pre></td></tr></table></figure></li></ol><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><h3 id="Switch-apt-sources"><a href="#Switch-apt-sources" class="headerlink" title="Switch apt sources"></a>Switch <code>apt</code> sources</h3><ol><li><p>Backup source list</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">cp</span> /etc/apt/sources.list.d/ubuntu.sources /etc/apt/sources.list.d/ubuntu.sources.bak<br></code></pre></td></tr></table></figure></li><li><p>Find out sources<br> Here I use <a href="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/">Tsinghua mirror</a></p></li><li><p>Modify the source</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> vi /etc/apt/sources.list.d/ubuntu.sources<br></code></pre></td></tr></table></figure></li><li><p>Update</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> apt-get update<br><span class="hljs-built_in">sudo</span> apt-get upgrade<br></code></pre></td></tr></table></figure></li></ol><h3 id="Install-using-the-apt-repository"><a href="#Install-using-the-apt-repository" class="headerlink" title="Install using the apt repository"></a>Install using the <code>apt</code> repository</h3><ol><li><p>Set up the Docker apt repository</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># Add Docker&#x27;s official GPG key:</span><br><span class="hljs-built_in">sudo</span> apt-get install ca-certificates curl<br><span class="hljs-built_in">sudo</span> install -m 0755 -d /etc/apt/keyrings<br><span class="hljs-built_in">sudo</span> curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chmod</span> a+r /etc/apt/keyrings/docker.asc<br><br><span class="hljs-comment"># Add the repository to Apt sources:</span><br><span class="hljs-built_in">echo</span> \<br><span class="hljs-string">&quot;deb [arch=<span class="hljs-subst">$(dpkg --print-architecture)</span> signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \</span><br><span class="hljs-string"><span class="hljs-subst">$(. /etc/os-release &amp;&amp; echo <span class="hljs-string">&quot;<span class="hljs-variable">$VERSION_CODENAME</span>&quot;</span>)</span> stable&quot;</span> | \<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">tee</span> /etc/apt/sources.list.d/docker.list &gt; /dev/null<br><span class="hljs-built_in">sudo</span> apt-get update<br></code></pre></td></tr></table></figure></li><li><p>Install the Docker packages</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin<br></code></pre></td></tr></table></figure></li><li><p>Verify that the installation is successful</p><p> Check docker command:</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> docker image <span class="hljs-built_in">ls</span><br><span class="hljs-comment"># REPOSITORY  TAG  IMAGE  ID  CREATED  SIZE</span><br></code></pre></td></tr></table></figure><p> OR running the hello-world image:</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> docker run hello-world<br></code></pre></td></tr></table></figure><p> The later one may issue error for two reason: </p><ol><li><p><strong>Run without <code>sudo</code></strong>: The docker user group exists but contains no users, which is why you’re required to use sudo to run Docker commands.</p></li><li><p><strong>Can not access to Docker Hub</strong>: The image ‘hello-world’ is not exist locally, it requires to get access to Docker Hub to download the image.</p></li></ol></li></ol><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://docs.docker.com/engine/install/ubuntu/">https://docs.docker.com/engine/install/ubuntu/</a><br><a href="https://www.cnblogs.com/lcxhk/p/14951334.html">https://www.cnblogs.com/lcxhk/p/14951334.html</a></p>]]></content>
    
    
    <categories>
      
      <category>Install</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ubuntu</tag>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>First to Hexo (Building Blog using Hexo and Github)</title>
    <link href="/blog.github.io/2024/11/30/First-to-Hexo/"/>
    <url>/blog.github.io/2024/11/30/First-to-Hexo/</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo-Installation"><a href="#Hexo-Installation" class="headerlink" title="Hexo Installation"></a>Hexo Installation</h1><ul><li><strong>Environment: Ubuntu&#x3D;24.4</strong></li></ul><h2 id="Install-Node-js"><a href="#Install-Node-js" class="headerlink" title="Install Node.js"></a>Install <a href="https://nodejs.org/en">Node.js</a></h2><h3 id="use-nvm"><a href="#use-nvm" class="headerlink" title="use nvm"></a>use nvm</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># installs nvm (Node Version Manager)</span><br>curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.0/install.sh | bash<br><br><span class="hljs-comment"># download and install Node.js (you may need to restart the terminal)</span><br>nvm install 22<br><br><span class="hljs-comment"># verifies the right Node.js version is in the environment</span><br>node -v <span class="hljs-comment"># should print `v22.11.0`</span><br><br><span class="hljs-comment"># verifies the right npm version is in the environment</span><br>npm -v <span class="hljs-comment"># should print `10.9.0`</span><br></code></pre></td></tr></table></figure><p><strong>Other methods can be found in <a href="https://nodejs.org/en/download/package-manager">Nodejs website</a>.</strong></p><h2 id="Install-Git"><a href="#Install-Git" class="headerlink" title="Install Git"></a>Install <a href="https://git-scm.com/">Git</a></h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> apt-get install git<br></code></pre></td></tr></table></figure><h2 id="Install-Hexo"><a href="#Install-Hexo" class="headerlink" title="Install Hexo"></a>Install <a href="https://hexo.io/">Hexo</a></h2><h3 id="make-a-folder-for-Hexo"><a href="#make-a-folder-for-Hexo" class="headerlink" title="make a folder for Hexo"></a>make a folder for Hexo</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> blog  <span class="hljs-comment"># `blog` in my case.</span><br></code></pre></td></tr></table></figure><h3 id="install-hexo-cli"><a href="#install-hexo-cli" class="headerlink" title="install hexo-cli"></a>install hexo-cli</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm install hexo-cli -g<br></code></pre></td></tr></table></figure><p>It take a while, because the <code>node_modules</code> has a reputation for being too bloated.</p><h1 id="Hexo-Usage"><a href="#Hexo-Usage" class="headerlink" title="Hexo Usage"></a>Hexo Usage</h1><h2 id="Initialize-Hexo"><a href="#Initialize-Hexo" class="headerlink" title="Initialize Hexo"></a>Initialize Hexo</h2><ol><li><p>goto blog folder</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> blog<br></code></pre></td></tr></table></figure></li><li><p>edit config</p><p> use vi:</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">vi _config.yml<br></code></pre></td></tr></table></figure><p> or vscode:</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">code _config_yml<br></code></pre></td></tr></table></figure></li><li><p>change the title, subtitle, author and url…</p><p> for example:</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">title:</span> <span class="hljs-string">dyliu&#x27;s</span> <span class="hljs-string">Blog</span><br><span class="hljs-attr">subtitle:</span> <span class="hljs-string">&#x27;Documenting my personal experience&#x27;</span><br><span class="hljs-attr">author:</span> <span class="hljs-string">dyliu</span><br><span class="hljs-attr">url:</span> <span class="hljs-string">https://yourname.github.io/</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="Create-blog-page"><a href="#Create-blog-page" class="headerlink" title="Create blog page"></a>Create blog page</h2><ol><li><p>new page</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">hexo new <span class="hljs-string">&quot;First-to-Hexo&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>edit page in vscode (or something else)</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">code <span class="hljs-built_in">source</span>/_posts/First-to-Hexo.md <br></code></pre></td></tr></table></figure></li></ol><h2 id="Preview-the-page"><a href="#Preview-the-page" class="headerlink" title="Preview the page"></a>Preview the page</h2><p>use</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">hexo server<br></code></pre></td></tr></table></figure><p>to start a local server <a href="http://localhost:4000/">http://localhost:4000</a></p><h1 id="Deploy-on-Github"><a href="#Deploy-on-Github" class="headerlink" title="Deploy on Github"></a>Deploy on Github</h1><h2 id="Create-Github-repository"><a href="#Create-Github-repository" class="headerlink" title="Create Github repository"></a>Create <a href="http://github.com/">Github</a> repository</h2><ol><li><p>Sign in (or sign up first) and Create new repository</p><p> It’s name should be <em><code>yourname.github.io</code></em>, where <code>yourname</code> is same with your github username, for example ‘dyliu0312.github.io’ in my case, to get to the page simply using <code>https://dyliu0312.github.io</code>.</p><p> Otherwise, it’l be <code>http://yourname.github.io/your_repository_name.github.io</code>.</p></li><li><p>Generate ssh key</p></li></ol><ul><li><p>git config</p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">git config --global user.name <span class="hljs-string">&quot;yourname&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;youremail&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>use</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ssh-keygen -t ed25519 -C <span class="hljs-string">&quot;your_email@example.com&quot;</span><br></code></pre></td></tr></table></figure><p>to generate a pair of ssh key in local machine.</p></li></ul><ol start="3"><li>Add ssh key to repository</li></ol><ul><li><p>Open the public key <code>.ssh/id_ed25519.pub</code>, and copy the context.</p></li><li><p>Turn to repository page, click <code>Settings</code>, and then click <code>Deploy keys</code> in <code>Security</code> to save new ssh key.</p></li></ul><h2 id="Edit-config"><a href="#Edit-config" class="headerlink" title="Edit config"></a>Edit config</h2><p>revise the <code>_config.yaml</code>file:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br><span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:yourname/yourname.github.io.git</span><br><span class="hljs-attr">brach:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><h2 id="Deploy"><a href="#Deploy" class="headerlink" title="Deploy"></a>Deploy</h2><ol><li><p>Install hexo-deployer-git</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure></li><li><p>Clean</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">hexo clean<br></code></pre></td></tr></table></figure></li><li><p>Generate</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">hexo g<br></code></pre></td></tr></table></figure></li><li><p>Deploy</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">hexo d<br></code></pre></td></tr></table></figure></li></ol><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://blog.csdn.net/weixin_43883917/article/details/143885553">https://blog.csdn.net/weixin_43883917/article/details/143885553</a><br><a href="https://training.github.com/downloads/github-git-cheat-sheet/">https://training.github.com/downloads/github-git-cheat-sheet/</a><br><a href="https://blog.csdn.net/m0_53127626/article/details/136090280">https://blog.csdn.net/m0_53127626/article/details/136090280</a><br><a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent">https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent</a><br><a href="https://mini-pi.github.io/2024/02/28/how-to-make-blog-wedsite/">https://mini-pi.github.io/2024/02/28/how-to-make-blog-wedsite/</a></p>]]></content>
    
    
    <categories>
      
      <category>Install</category>
      
      <category>Build</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>GitHub</tag>
      
      <tag>Ubuntu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/blog.github.io/2024/11/30/hello-world/"/>
    <url>/blog.github.io/2024/11/30/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
